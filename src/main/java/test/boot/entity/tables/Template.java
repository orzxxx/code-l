/*
 * This file is generated by jOOQ.
*/
package test.boot.entity.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import test.boot.entity.Keys;
import test.boot.entity.Public;
import test.boot.entity.tables.records.TemplateRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Template extends TableImpl<TemplateRecord> {

    private static final long serialVersionUID = -2048815816;

    /**
     * The reference instance of <code>PUBLIC.T_TEMPLATE</code>
     */
    public static final Template T_TEMPLATE = new Template();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TemplateRecord> getRecordType() {
        return TemplateRecord.class;
    }

    /**
     * The column <code>PUBLIC.T_TEMPLATE.ID</code>.
     */
    public final TableField<TemplateRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_15C88540_4EC4_4257_AA2F_A2BC87F2F982)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>PUBLIC.T_TEMPLATE.CONTENT</code>.
     */
    public final TableField<TemplateRecord, String> CONTENT = createField("CONTENT", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>PUBLIC.T_TEMPLATE.NAME</code>.
     */
    public final TableField<TemplateRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>PUBLIC.T_TEMPLATE.FILE_NAME</code>.
     */
    public final TableField<TemplateRecord, String> FILE_NAME = createField("FILE_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>PUBLIC.T_TEMPLATE.FILE_PATH</code>.
     */
    public final TableField<TemplateRecord, String> FILE_PATH = createField("FILE_PATH", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

    /**
     * The column <code>PUBLIC.T_TEMPLATE.PARAMETERS</code>.
     */
    public final TableField<TemplateRecord, String> PARAMETERS = createField("PARAMETERS", org.jooq.impl.SQLDataType.VARCHAR.length(256), this, "");

    /**
     * Create a <code>PUBLIC.T_TEMPLATE</code> table reference
     */
    public Template() {
        this("T_TEMPLATE", null);
    }

    /**
     * Create an aliased <code>PUBLIC.T_TEMPLATE</code> table reference
     */
    public Template(String alias) {
        this(alias, T_TEMPLATE);
    }

    private Template(String alias, Table<TemplateRecord> aliased) {
        this(alias, aliased, null);
    }

    private Template(String alias, Table<TemplateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TemplateRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_TEMPLATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TemplateRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TemplateRecord>> getKeys() {
        return Arrays.<UniqueKey<TemplateRecord>>asList(Keys.CONSTRAINT_D, Keys.CONSTRAINT_D5);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Template as(String alias) {
        return new Template(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Template rename(String name) {
        return new Template(name, null);
    }
}
