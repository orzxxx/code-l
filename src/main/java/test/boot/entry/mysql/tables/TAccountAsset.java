/*
 * This file is generated by jOOQ.
*/
package test.boot.entry.mysql.tables;


import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import test.boot.entry.mysql.Datasync;
import test.boot.entry.mysql.Keys;
import test.boot.entry.mysql.tables.records.TAccountAssetRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TAccountAsset extends TableImpl<TAccountAssetRecord> {

    private static final long serialVersionUID = -1281088411;

    /**
     * The reference instance of <code>datasync.t_account_asset</code>
     */
    public static final TAccountAsset T_ACCOUNT_ASSET = new TAccountAsset();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TAccountAssetRecord> getRecordType() {
        return TAccountAssetRecord.class;
    }

    /**
     * The column <code>datasync.t_account_asset.FUND_ACCOUNT</code>. 资金账号
     */
    public final TableField<TAccountAssetRecord, String> FUND_ACCOUNT = createField("FUND_ACCOUNT", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "资金账号");

    /**
     * The column <code>datasync.t_account_asset.ORG_ID</code>. 营业部ID
     */
    public final TableField<TAccountAssetRecord, String> ORG_ID = createField("ORG_ID", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.VARCHAR)), this, "营业部ID");

    /**
     * The column <code>datasync.t_account_asset.INTER_ASSET</code>. 体内资产
     */
    public final TableField<TAccountAssetRecord, BigDecimal> INTER_ASSET = createField("INTER_ASSET", org.jooq.impl.SQLDataType.DECIMAL.precision(20, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "体内资产");

    /**
     * The column <code>datasync.t_account_asset.OUTER_ASSET</code>. 体外资产
     */
    public final TableField<TAccountAssetRecord, BigDecimal> OUTER_ASSET = createField("OUTER_ASSET", org.jooq.impl.SQLDataType.DECIMAL.precision(20, 2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "体外资产");

    /**
     * The column <code>datasync.t_account_asset.TOTAL_ASSET</code>. 总资产
     */
    public final TableField<TAccountAssetRecord, BigDecimal> TOTAL_ASSET = createField("TOTAL_ASSET", org.jooq.impl.SQLDataType.DECIMAL.precision(20, 2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "总资产");

    /**
     * The column <code>datasync.t_account_asset.EXPIRE_ASSET</code>. 到期资产
     */
    public final TableField<TAccountAssetRecord, BigDecimal> EXPIRE_ASSET = createField("EXPIRE_ASSET", org.jooq.impl.SQLDataType.DECIMAL.precision(20, 2).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "到期资产");

    /**
     * The column <code>datasync.t_account_asset.UPDATE_TIME</code>. 更新日期
     */
    public final TableField<TAccountAssetRecord, Timestamp> UPDATE_TIME = createField("UPDATE_TIME", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "更新日期");

    /**
     * Create a <code>datasync.t_account_asset</code> table reference
     */
    public TAccountAsset() {
        this("t_account_asset", null);
    }

    /**
     * Create an aliased <code>datasync.t_account_asset</code> table reference
     */
    public TAccountAsset(String alias) {
        this(alias, T_ACCOUNT_ASSET);
    }

    private TAccountAsset(String alias, Table<TAccountAssetRecord> aliased) {
        this(alias, aliased, null);
    }

    private TAccountAsset(String alias, Table<TAccountAssetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Datasync.DATASYNC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TAccountAssetRecord> getPrimaryKey() {
        return Keys.KEY_T_ACCOUNT_ASSET_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TAccountAssetRecord>> getKeys() {
        return Arrays.<UniqueKey<TAccountAssetRecord>>asList(Keys.KEY_T_ACCOUNT_ASSET_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TAccountAsset as(String alias) {
        return new TAccountAsset(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TAccountAsset rename(String name) {
        return new TAccountAsset(name, null);
    }
}
