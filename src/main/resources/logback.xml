<?xml version="1.0" encoding="UTF-8"?>
 
<!-- 级别从高到低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
<!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="5 seconds" debug="false">
 
    <!-- JXM动态修改配置 -->
    <jmxConfigurator />
     
    <!-- 定义日志文件 输出位置 配置在MAVEN中-->
    <property name="logDir" value="./logs" />
     
    <!-- 日志最大的历史 30天 -->
    <property name="maxHistory" value="10" /> 
     
    <!-- 日志文件大小 -->
    <property name="maxFileSize" value="50MB" /> 
    
    <!-- 日志文件级别 配置在MAVEN中-->
    <property name="level" value="DEBUG" /> 
    
    <!-- MDC全局拦截器, 根据MDC的值进行判断 -->
    <!-- MDC.put("uuid", UUID.randomUUID().toString()); -->
    <!-- MDC.remove("uuid"); -->
    <!-- 输出MDC值 %X{key名称} -->
    <!-- <turboFilter class="ch.qos.logback.classic.turbo.MDCFilter">
			<MDCKey>uuid</MDCKey>
			<Value>uuid</Value> -->
			<!-- ACCEPT 允许输出 P.S.后续拦截器不会生效 -->
			<!-- DENY 拒绝输出 -->
			<!-- NEUTRAL 执行下一个拦截器 -->
			<!-- <OnMatch>NEUTRAL</OnMatch>
			<onMismatch>DENY</onMismatch>
	</turboFilter> -->
	
	<!-- Marker全局拦截器, 根据是否存在Marker判断 -->	
	<!-- logger.info(MarkerFactory.getMarker("marker"), "My Log"); -->	
	<!-- <turboFilter class="ch.qos.logback.classic.turbo.MarkerFilter">
	    <Marker>marker</Marker>
	    <OnMatch>DENY</OnMatch>
	    <onMismatch>NEUTRAL</onMismatch>
	  </turboFilter> -->
        
    <!-- ConsoleAppender 控制台输出日志 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>
                <!-- 设置日志输出格式 -->
                %X{uuid} %d{yyyy-MM-dd HH:mm:ss.SSS} %-5p %c - %m%n
            </pattern>
        </encoder>
        
    </appender>
    
    <!-- ERROR级别日志 -->
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
   <!--  <appender name="ERROR"
        class="ch.qos.logback.core.rolling.RollingFileAppender">
        过滤器，只记录WARN级别的日志
        如果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。
        <filter class="ch.qos.logback.classic.filter.LevelFilter">         
            设置过滤级别
            <level>ERROR</level>
            用于配置符合过滤条件的操作
            <onMatch>ACCEPT</onMatch>
            用于配置不符合过滤条件的操作
            <onMismatch>DENY</onMismatch>
        </filter>
        最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            日志输出位置 可相对、和绝对路径
            <fileNamePattern>
            ${logDir}/error/%d{yyyy-MM-dd}.log
            </fileNamePattern>
            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>
                设置日志输出格式
                %d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger - %msg%n
            </pattern>
        </encoder>
    </appender> -->
 
     
    <!-- 大于等于WARN级别日志 appender -->
    <appender name="WarnAndHigher" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 过滤器，记录超过WARN级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>WARN</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${logDir}/warn/%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory> 
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>
        </encoder>
    </appender>
     
     
     <!-- 业务日志 appender -->
    <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter> -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- <fileNamePattern>${logDir}/info/%d{yyyy-MM-dd}/info-log.log</fileNamePattern>  -->
            <fileNamePattern>${logDir}/info/%d{yyyy-MM-dd}.log</fileNamePattern> 
            <maxHistory>${maxHistory}</maxHistory> 
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>
        </encoder>
    </appender>
     
     
    <!-- DEBUG级别日志 appender -->
    <!-- <appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${logDir}/debug/%d{yyyy-MM-dd}/debug-log.log</fileNamePattern> 
            <maxHistory>${maxHistory}</maxHistory> 
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>
        </encoder>
    </appender> -->
     
     
    <!-- TRACE级别日志 appender -->
    <!-- <appender name="TRACE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>TRACE</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${logDir}/trace/%d{yyyy-MM-dd}/trace-log.log</fileNamePattern> 
            <maxHistory>${maxHistory}</maxHistory> 
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>
        </encoder>
    </appender> -->

	<!-- <appender name="SqlAppender"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${logDir}/sql/sql.%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>${maxFileSize}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger - %msg%n
			</pattern>
		</encoder>
	</appender> -->
	
	<appender name="MonitorTaskAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${logDir}/monitor-task/%d{yyyy-MM-dd}.log</fileNamePattern> 
            <maxHistory>${maxHistory}</maxHistory> 
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>
        </encoder>
   </appender>
   
   <logger name="MonitorTaskLogger">
   		<appender-ref ref="MonitorTaskAppender" />
   </logger>
   
   <!-- 框架日志过滤 -->
   <logger name="org.mybatis.spring.SqlSessionUtils" level="OFF" />
   <logger name="io.netty.handler.codec.http.websocketx.WebSocket08FrameEncoder" level="OFF" />
   <logger name="io.netty.handler.codec.http.websocketx.WebSocket08FrameDecoder" level="OFF" />
   
   <!-- root级别 -->
    <root>
        <!-- 打印debug级别日志及以上级别日志 -->
        <level value="${level}" />
        <!-- 控制台输出 -->
        <appender-ref ref="STDOUT" />
        <!-- 文件输出 -->
        <!-- <appender-ref ref="DEBUG" /> -->
        <!-- <appender-ref ref="INFO" /> -->
        <!-- <appender-ref ref="WarnAndHigher" /> -->
    </root>
   
</configuration>
